#!/usr/bin/env node

const http = require('http');
const axios = require('axios');

const config = require('../config')[process.env.NODE_ENV || 'development'];

const log = config.log();
const service = require('../server/service')(config);

const server = http.createServer(service);

// Important - a service should not have a fixed port but should randomly choose one
// server.listen(process.env.PORT || 3000);
server.listen(0) // node will select port automatically

server.on('listening', () => {
  const registerService = () => {
    return axios.put(`http://localhost:3000/register/${config.name}/${config.version}/${server.address().port}`)
  }
  
  // we want to unregister the service whey they are teminated
  const unregisterService = () => {
    return axios.delete(`http://localhost:3000/register/${config.name}/${config.version}/${server.address().port}`)
  }

  const interval = setInterval(registerService, 20000);
  
  const cleanup = async () => {
    clearInterval(interval)
    await unregisterService()
  }

  // If service failed to unregister itself, then we still have the time in place
  // this exit process may vary from os to os, in reallife application
  process.on('uncaughtException', async () => {
    await cleanup()
    process.exit(0)
  })
  process.on('SIGINT', async () => {
    await cleanup()
    process.exit(0)
  })
  process.on('SIGTERM', async () => {
    await cleanup()
    process.exit(0)
  })

  // setTimeout(() => {
  //   throw new Error('Something wrong');
  // }, 10000)

  log.info(
    `Hi there! I'm listening on port ${server.address().port} in ${service.get('env')} mode.`,
  );
});
